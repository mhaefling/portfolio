subject: Projects
listing-order: 5
icon: "/assets/img/clipboard-list.svg"
contents:
  - title: |
      <div style="display: flex; align-items: center; gap: 10px; margin:0px;">
        <a href="https://github.com/turingschool/tracker-crm-fe"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/github/github-original.svg" width=50 /></a>
        <img src="/assets/img/tracker-icon.png" width="50"/>
        <h1 style="margin: 0;"><a href="https://tracker-crm-fe-38f7cf1aaca5.herokuapp.com/">Tracker</a></h1>
      </div>

    description: |
        <div style="text-align:left; margin:0px; padding=0px;">
          <p>Tracker is a full-stack web-based application, collaboratively developed by three Turing School cohorts, designed to optimize and simplify the job search process. It enables users to efficiently organize and track job applications, associated companies, and professional contacts. Users can document detailed notes for each opportunity, monitor their progress throughout the application lifecycle, and maintain a clear overview of their job search efforts. Additionally, Tracker supports interview preparation by generating personalized mock interview questions based on job descriptions.</p>
          
          <h4><u>Tech Stack:</u></h4>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/ruby/ruby-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rails/rails-plain.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rspec/rspec-original.svg" width="30"/>
          <img src="/assets/img/factory-bot.webp" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg" width="30"/>
          <img src="/assets/img/react-router.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/typescript/typescript-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/cypressio/cypressio-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/tailwindcss/tailwindcss-original.svg" width="30"/>

          <h4><u>Learning Goals:</u></h4>
          <p>Aimed to develop a strong understanding of brownfield codebase maintenance, with a focus on learning and applying TypeScript declarations and interfaces to improve type safety and code clarity.</p>

          <h4><u>Contributions:</u></h4>
          <div style="margin-left: 20px;">
            <p>• Refactored the login component by separating the authentication forms (login and user registration) from the sidebar containing the Tracker logo and slogan, resulting in improved code organization and maintainability. Applied Tailwind CSS to ensure a consistent and visually appealing design across both forms, including the implementation of interactive hover effects for enhanced user experience.</p>
            <p>• Integrated FactoryBot and Faker into the Ruby on Rails backend to streamline test data generation, enabling the creation of consistent, reusable, and realistic test objects for improved reliability and efficiency in automated testing.</p>
            <p>• Refactored the job application component to enhance user experience by implementing a helper function that validates and standardizes the application URL input. The function automatically appends the appropriate HTTP protocol (http:// or https://) if omitted, ensuring consistent and functional links across the application.</p>
            <p>• Implemented Brakeman, a static analysis security tool, within the Ruby on Rails backend to proactively identify and address potential security vulnerabilities, strengthening the application’s overall security posture during development.</p>
            <p>• Led the planning and implementation of a directory restructure for the React frontend components, optimizing the project’s organization to enhance maintainability and streamline collaboration for future contributors.</p>
          </div>

        </div>

  - title: |
      <div style="display: flex; align-items: center; gap: 10px; margin:0px;">
        <a href="https://github.com/mhaefling/herbal-blends-fe"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/github/github-original.svg" width=50 /></a>
        <img src="/assets/img/herbal-blends-logo.jpg" width="50"/>
        <h1 style="margin: 0;">Herbal Blends</h1>
      </div>

    description: |
        <div style="text-align:left; margin:0px; padding=0px;">
          <p>Herbal Blends is a full-stack web application designed as the foundation for a small-scale e-commerce business offering weekly and monthly tea subscription services. The application includes a dedicated admin portal that enables Herbal Blends employees to efficiently manage inventory, maintain customer accounts, and oversee active subscription plans. Key features include the ability to view and update customer information, modify subscription details, and activate or deactivate tea offerings—supporting streamlined business operations and enhancing overall administrative control.</p>
          
          <h4><u>Tech Stack:</u></h4>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/ruby/ruby-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rails/rails-plain.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rspec/rspec-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg" width="30"/>
          <img src="/assets/img/react-router.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg" width="30"/>
          <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/cypressio/cypressio-original.svg" width="30"/>

          <h4><u>Learning Goals:</u></h4>
          <p>This project marked my first solo development of a full-stack web application, providing a hands-on opportunity to deepen my understanding of React, React Router, and core React concepts such as useState and useParams. It served as a foundational experience in building and managing client-side functionality within a dynamic user interface.</p>

          <h4><u>Contributions:</u></h4>
          <div style="margin-left: 20px;">
            <p>• Developed a Ruby on Rails backend API implementing full CRUD functionality for managing subscriptions, customers, and teas, utilizing RESTful routes to ensure scalable and maintainable resource management.</p>
            <p>• Integrated the JSONAPI::Serializer gem to structure and standardize API responses, enabling efficient and consistent data rendering on the frontend.</p>
            <p>• Developed a React-based user interface composed of modular, reusable components to display available teas, list customers with their subscription details, and present active subscriptions, including tea types, subscribed customers, renewal frequency (weekly or monthly), and pricing information.</p>
            <p>• Designed and implemented a detailed subscription view component, enabling users to view comprehensive subscription information—including renewal frequency, pricing, included teas, and subscriber status (active/inactive). Each tea item is clickable, providing additional details such as brew temperature, brew time, and a general description.</p>
            <p>• Authored comprehensive Cypress tests to validate frontend functionality and ensure responsiveness across various user interactions and viewports.</p>
          </div>

        </div>

  - title: |
      <div style="display: flex; align-items: center; gap: 10px; margin:0px;">
        <a href="https://github.com/mhaefling/rancid-tomatillos"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/github/github-original.svg" width=50 /></a>
        <img src="/assets/img/rancid-logo.png" width="50"/>
        <a href="https://rancid-tomatillos-u5bo.onrender.com/"><h1 style="margin: 0;">Rancid-Tomatillos</h1></a>
      </div>
    description: |
      <div style="text-align:left; margin:0px; padding=0px;">

        <p>Rancid Tomatillos is a front-end web application built with React that emulates a movie review platform. The application retrieves movie data by making asynchronous requests to a backend API using the Fetch API. It presents the movies in a dynamic, responsive grid of posters, allowing users to interact with each title through intuitive upvote and downvote buttons. Additionally, users can click on any movie poster to view detailed information about the selected film, enhancing the overall user experience with smooth navigation and real-time updates.</p>
          
        <h4><u>Tech Stack:</u></h4>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg" width="30"/>
        <img src="/assets/img/react-router.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/cypressio/cypressio-original.svg" width="30"/>

        <h4><u>Learning Goals:</u></h4>
        <p>This project marked our first paired programming collaboration, with a focus on deepening our understanding of React. Key objectives included developing reusable components to promote modular and maintainable code, leveraging the Fetch API to perform asynchronous calls to a backend service, and implementing React Router to enable dynamic, client-side routing for an improved user experience.</p>

        <h4><u>Contributions:</u></h4>
        <div style="margin-left: 20px;">
          <p>• Implemented a Fetch function to retrieve movie poster data from the backend API and efficiently stored the response in a state variable for use throughout the application.</p>
          <p>• Collaborated with a partner to architect the application using reusable React components, while gaining a strong understanding of data flow and effectively passing props to ensure seamless communication between components.</p>
          <p>• Refactored multiple PATCH request functions into a single dynamic function to efficiently update individual movie vote counts, improving code maintainability and reducing redundancy.</p>
          <p>• Developed a dedicated Movie Details component to display additional information, including a full movie description, genres, and a high-resolution backdrop image, enhancing user engagement and interface depth.</p>
          <p>• Collaborated with a partner to research and implement React Router for dynamic URL routing, enabling seamless navigation and individualized movie detail pages within the application.</p>
        </div>

      </div>

  - title: |
      <div style="display: flex; align-items: center; gap: 10px; margin:0px;">
        <a href="https://github.com/mhaefling/viewing-party-api"><img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/github/github-original.svg" width=50 /></a>
        <img src="/assets/img/viewing-party-icon.png" width="50"/>
        <h1 style="margin: 0;"><a href="https://dry-headland-80834-a0895494fc50.herokuapp.com/">Viewing Party API</a></h1>
      </div>

    description: |
      <div style="text-align:left; margin:0px; padding=0px;">
        <p>Viewing Party API is a Ruby on Rails backend service that integrates with The Movie Database (TMDb) API to deliver rich movie-related data. It enables users to search for movies currently playing in theaters, top-rated films, titles by keyword, and movies filtered by average vote or unique ID. In addition to robust search functionality, the API allows users to create and manage custom viewing parties, specifying the movie to be watched, scheduling start and end times, assigning a party name, and inviting other users by their IDs.</p>
          
        <h4><u>Tech Stack:</u></h4>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/ruby/ruby-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rails/rails-plain.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rspec/rspec-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/postgresql/postgresql-original.svg" width="30"/>
        <img src="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/postman/postman-original.svg" width="30"/>

        <h4><u>Learning Goals:</u></h4>
        <p>This project served as an opportunity to independently demonstrate backend development skills by building a fully functional API. Key objectives included consuming data from an external API using Faraday, designing and integrating service objects and Plain Old Ruby Objects (POROs), and applying the principles of RESTful architecture to create clean, maintainable routes and endpoints.</p>

        <h4><u>Contributions:</u></h4>
        <div style="margin-left: 20px;">
          <p>• Designed the backend database schema and implemented table migrations to establish clear data relationships and support the application’s core functionality with a scalable, well-structured data model.</p>
          <p>• Utilized the Faraday gem to consume data from an external API, and implemented a gateway pattern to manage and structure requests to specific API endpoints using query parameters for efficient data retrieval.</p>
          <p>• Designed a Plain Old Ruby Object (PORO) to encapsulate individual movie data, enabling seamless integration with the JSON serializer for structured and consistent API responses.</p>
          <p>• Developed a model-level helper method to validate invited users for a viewing parties, ensuring only existing users were included and filtering out invalid entries to prevent errors and enhance the overall user experience.</p>
          <p>• Manually crafted custom model serializers to deliver tailored JSON responses, ensuring users received only the relevant and structured data needed.</p>
        </div>

      </div>

